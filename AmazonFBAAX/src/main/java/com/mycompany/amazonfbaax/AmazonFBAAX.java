/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.amazonfbaax;

import Model.BodegasEstados;
import Model.DataBase;
import Model.IndexByLabelsOrdersExcell;
import Model.ItemOrdenProducto;
import Model.ProductoStock;
import Model.SalidaCSV;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

/**
 *
 * @author andre
 */
public class AmazonFBAAX extends javax.swing.JFrame {

    private DataBase dataBase = null;
    private JFileChooser seleccion = null;
    File archivoOrdenes = null;

    FileWriter fileOrdenesPrecios = null;
    BufferedWriter bufferGrabarTXT = null;
    FileWriter fileAmaxonAX = null;
    BufferedWriter bufferGrabarCSV = null;

    ArrayList<SalidaCSV> listaSalidaCSV = null;
    ArrayList<ProductoStock> listaProductoStock = null;
    ArrayList<BodegasEstados> listaBodegasEstados = null;
    IndexByLabelsOrdersExcell indexByLabelsOrders = null;
    
    String nombreArchivo = " ";
    String salida = " ";
    String nuevoEncabezado = " ";
    boolean bodega500 = false;
    boolean bodega888 = false;
    boolean bodega999 = false;
    
    public AmazonFBAAX() {
        initComponents();
        seleccion = new JFileChooser();
        dataBase = new DataBase();
        //listaBodegasEstados = dataBase.consultarWarehouseStates();
        listaBodegasEstados = dataBase.asignarWarehouseStates();
        listaProductoStock = new <ProductoStock>ArrayList();
        listaSalidaCSV = new <SalidaCSV>ArrayList();
        indexByLabelsOrders = new IndexByLabelsOrdersExcell();
        //dataBase.consultarInventOnHand("107822");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonOrdenes = new javax.swing.JButton();
        botonProceso = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        jLabel_DateUpdate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Convertidor Interface Amazon a Interface AX");
        setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        botonOrdenes.setText("Seleccionar Interface AMAXON FBA - CSV");
        botonOrdenes.setMaximumSize(new java.awt.Dimension(297, 35));
        botonOrdenes.setMinimumSize(new java.awt.Dimension(297, 35));
        botonOrdenes.setPreferredSize(new java.awt.Dimension(297, 35));
        botonOrdenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOrdenesActionPerformed(evt);
            }
        });

        botonProceso.setText("Generar Interface FBA - AX");
        botonProceso.setMaximumSize(new java.awt.Dimension(297, 35));
        botonProceso.setMinimumSize(new java.awt.Dimension(297, 35));
        botonProceso.setPreferredSize(new java.awt.Dimension(297, 35));
        botonProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesoActionPerformed(evt);
            }
        });

        areaTexto.setEditable(false);
        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        jScrollPane1.setViewportView(areaTexto);

        jLabel_DateUpdate.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jLabel_DateUpdate.setText("08-May-2024");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(botonOrdenes, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(botonProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_DateUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonOrdenes, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_DateUpdate)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesoActionPerformed
        boolean procesoOk = true;
        if (archivoOrdenes == null || !(archivoOrdenes.isFile())) {
            areaTexto.append("Error en la selecci√≥n de las ordenes Amazon FBA\n\n");
            procesoOk = false;
        }
        if (procesoOk) {
            generarListaBodegasEstados();
            generarListaSalidaCSV();
            generarInterfaceAX();
        } else {
            areaTexto.append("Error en los archivos seleccionados\n\n");
        }
        try {
            dataBase.getConnection().close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog( null, "dataBase.getConnection."+ex.getMessage());
        }
    }//GEN-LAST:event_botonProcesoActionPerformed

    private void botonOrdenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOrdenesActionPerformed
        archivoOrdenes = seleccionarArchivo();
    }//GEN-LAST:event_botonOrdenesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AmazonFBAAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AmazonFBAAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AmazonFBAAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AmazonFBAAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AmazonFBAAX().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton botonOrdenes;
    private javax.swing.JButton botonProceso;
    private javax.swing.JLabel jLabel_DateUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private File seleccionarArchivo() {
        int result = seleccion.showOpenDialog(null);
        File archivo = seleccion.getSelectedFile();
        // validar archivo.exists() archivo.isFile()
        if (result == JFileChooser.APPROVE_OPTION) {
            salida = archivo.getPath() + " | " + archivo.getName();
            System.out.println("Salida = " + salida);
            nombreArchivo = archivo.getName();
            if (!(nombreArchivo.contains(".csv"))) {
                salida += " | La interface no es un Archivo de Valores separados por comas\n\n";
                areaTexto.append(salida);
            } else {
                salida += "\n\n";
                areaTexto.append(salida);
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            areaTexto.append("Cancelar Seleccion\n\n");
        }

        return archivo;
    }

    private void generarListaBodegasEstados() {
        listaBodegasEstados.forEach((bodegaEstado) -> areaTexto.append(bodegaEstado.toString() + "\n"));
        areaTexto.append("\n");
    }

    private void generarListaSalidaCSV(){
        LocalDateTime objFechaHora = LocalDateTime.now();
        String fechaHora = objFechaHora.toString();
        fechaHora = fechaHora.replace(':', '.');

        try {
            fileOrdenesPrecios = new FileWriter(archivoOrdenes.getPath().replace(archivoOrdenes.getName(),
                    "AXWork-" + fechaHora + ".csv"));
            bufferGrabarTXT = new BufferedWriter(fileOrdenesPrecios);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "generarInterfaceAX().fileOrdenes." + ex.getMessage());
            System.exit(0);
        }
        salida=null;
        areaTexto.append("\n********** generarNuevaInterfaceOrdenes **********\n");
        nombreArchivo = archivoOrdenes.getPath();
        try ( BufferedReader fileEntrada = new BufferedReader(new FileReader(nombreArchivo))) {
            CSVRecord recordsCSV=null;
            Iterator<CSVRecord> recordsIteratorCSV = CSVFormat.EXCEL.parse(fileEntrada).iterator();
            // Leer Encabezados
            while (recordsIteratorCSV.hasNext()) {
                recordsCSV = recordsIteratorCSV.next();
                salida = Arrays.toString(recordsCSV.values());
                salida = salida.replace("[", "").replace("]", "");
                System.out.println(salida);
                if(salida.contains("date/time")){
                    break;
                }   
            }
            // Determinar index Labels proceso preliminar
            if (salida != null) {
                getIndexByLabelsOrders(recordsCSV);
            } else {
                JOptionPane.showMessageDialog(null, "The interface Amazon FAB has no headers");
                System.exit(0);
            }           
            // Grabar Nuevo Encabezado
            salida = "AssignedWharehouse" + ","
                    + "Wharehouse" + ","
                    + salida;
            
            nuevoEncabezado = salida;
            bufferGrabarTXT.write(salida+"\n");
            areaTexto.append(salida + "\n");
            //
            while (recordsIteratorCSV.hasNext()) {
                recordsCSV = recordsIteratorCSV.next();
                salida = Arrays.toString(recordsCSV.values());
                salida = salida.replace("[", "").replace("]", "");
                String[] celdas = recordsCSV.values();
                
                BodegasEstados bodegaEstado;                
                if (celdas[indexByLabelsOrders.orderState].length()>2){
                    bodegaEstado = buscarBodegaEstadoNombre(celdas[indexByLabelsOrders.orderState]);
                } else {
                    bodegaEstado = buscarBodegaEstado(celdas[indexByLabelsOrders.orderState]);
                }
                //  
                ItemOrdenProducto itemProducto;
                ProductoStock productoStock;
                //
                if (celdas[indexByLabelsOrders.type].equalsIgnoreCase("Order") ||
                    celdas[indexByLabelsOrders.type].equalsIgnoreCase("Refund")){
                    itemProducto = new ItemOrdenProducto("",celdas[indexByLabelsOrders.sku],
                            "", "", celdas[indexByLabelsOrders.quantity]);
                    productoStock = asignarBodegaDisponibilidad(
                            bodegaEstado, itemProducto);  
                }else{
                    productoStock = new ProductoStock("888888");
                    productoStock.setBodegaAsignada("888");
                    this.bodega888=true;
                }

                salida = productoStock.getBodegaAsignada() + ","
                        + bodegaEstado.getBodegaID() + ","
                        + salida;
                
                bufferGrabarTXT.write(salida+"\n");
                areaTexto.append(salida + "\n");
                
                SalidaCSV salidaCSV = new SalidaCSV(productoStock.getBodegaAsignada(), recordsCSV);
                listaSalidaCSV.add(salidaCSV);
            }
            fileEntrada.close();
            bufferGrabarTXT.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "generarInterfaceAX().AmazonFBA." + e.getMessage());
        }
    }

    private BodegasEstados buscarBodegaEstado(String celda) {
        BodegasEstados bodegaBusqueda = new BodegasEstados("99", "Error", "999");
        for (BodegasEstados bodega : listaBodegasEstados) {
            if (celda.toUpperCase().equals(bodega.getEstadoID())) {
                bodegaBusqueda = bodega;
                break;
            }
        }
        areaTexto.append(bodegaBusqueda.toString()+"\n");
        return bodegaBusqueda;
    }

    private BodegasEstados buscarBodegaEstadoNombre(String celda) {
        BodegasEstados bodegaBusqueda = new BodegasEstados("99", "Error", "999");
        for (BodegasEstados bodega : listaBodegasEstados) {
            if (bodega.getNombreEstado().contains(celda.toUpperCase())) {
                bodegaBusqueda = bodega;
                break;
            }
        }
        areaTexto.append(bodegaBusqueda.toString()+"\n");
        return bodegaBusqueda;
    }
    
    private String ignorarCaracteresSKU(String celda) {
        if (celda.contains("-")){
            int index = celda.indexOf('-');
            celda = celda.substring(0, index);            
        }
        return celda;
    }

    private ProductoStock asignarBodegaDisponibilidad(BodegasEstados bodegaEstado, 
            ItemOrdenProducto itemProducto) {
    
        System.out.println(itemProducto.toString());
        String sku = ignorarCaracteresSKU(itemProducto.getSKU());
        ProductoStock productoBusqueda = buscarProductoStock(sku);
        
        // Asignar Bodega x Disponibilidad
        int cantidad = itemProducto.getCantidad().isEmpty()? 0:Integer.parseInt(itemProducto.getCantidad());
              
        switch (bodegaEstado.getBodegaID()){
            case "999":
                    productoBusqueda.setBodegaAsignada("999");
                    bodega999 = true;
                break;
            default:
                if (productoBusqueda.getStock500() >= cantidad) {
                    productoBusqueda.setBodegaAsignada("500");
                    productoBusqueda.setRestaStock500(cantidad);
                    bodega500 = true;
                } else {
                    productoBusqueda.setBodegaAsignada("999");
                    bodega999 = true;
                }               
        }
        // Update Objeto
        listaProductoStock.set(productoBusqueda.getIndexLista(), productoBusqueda);
        //
        areaTexto.append(productoBusqueda.toString()+"\n");
        return productoBusqueda;
    }

    private ProductoStock buscarProductoStock(String sku) {
        ProductoStock productoBusqueda = new ProductoStock(sku);        
        boolean existeProducto = false;
        int indexLista = 0;
        
        if (!listaProductoStock.isEmpty()){
            for (ProductoStock producto : listaProductoStock) {
                if (sku.equals(producto.getSKU())) {
                    productoBusqueda = producto;
                    productoBusqueda.setIndexLista(indexLista);
                    existeProducto = true;
                    break;
                }
                indexLista++;
            }
        }        
        if (!existeProducto){
            productoBusqueda = dataBase.consultarInventOnHand(sku);
            indexLista = listaProductoStock.size();
            productoBusqueda.setIndexLista(indexLista);
            listaProductoStock.add(productoBusqueda);  
            //indexLista = listaProductoStock.indexOf(productoBusqueda);
        }        
        return productoBusqueda;
    }

    private void generarInterfaceAX() {
        areaTexto.append("\n********** generarInterfaceAX **********\n");   
        if (bodega500){
            generarInterfaceBodegaAX("500","FBA");
        }
        if (bodega888){
            generarInterfaceBodegaAX("888", "OtherTransactions");
        }        
        if (bodega999){
            generarInterfaceBodegaAX("999", "NoAsignado");
        }
        areaTexto.append("Fin Proceso");
    }

    private void generarInterfaceBodegaAX(String bodega, String nombreBodega) {        
        areaTexto.append("\n********** generarInterfaceAX - Bodega "+bodega+" "+nombreBodega+" **********\n");        
        LocalDateTime objFechaHora = LocalDateTime.now();
        String fechaHora = objFechaHora.toString();
        fechaHora = fechaHora.replace(':', '.');

        try {
            fileAmaxonAX  = new FileWriter(archivoOrdenes.getPath().replace(archivoOrdenes.getName(),
                    "AX"+nombreBodega + fechaHora + ".csv"));
            bufferGrabarCSV = new BufferedWriter(fileAmaxonAX);

            // Encabezados AX
            salida = crearEtiquetasAxCSV();
            bufferGrabarCSV.write(salida);
            areaTexto.append(salida);
            //
            for (SalidaCSV salidaCSV : listaSalidaCSV) {
                if (bodega.equals(salidaCSV.getBodegaAsignada())) {
                    salida = generarAxCSV(salidaCSV.getLineaCSV());
                    bufferGrabarCSV.write(salida);
                    areaTexto.append(salida);
                }
            } 
            bufferGrabarCSV.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "generarInterfaceBodegaAX().fileAmaxonAX." + ex.getMessage());
        }
    }

    private String crearEtiquetasAxCSV() {
        return  "\n\n\n\n\n\n\n"+ // AX Ignora las primeras 7 filas Resuelto 18Mar2024
                "\"date/time\","+
                "\"settlement id\","+
                "\"type\","+
                "\"order id\","+
                "\"sku\","+
                "\"description\","+
                "\"quantity\","+
                "\"marketplace\","+
                "\"fulfillment\","+
                "\"order city\","+
                "\"order state\","+
                "\"order postal\","+
                "\"tax collection model\","+
                "\"product sales\","+
                "\"product sales tax\","+
                "\"shipping credits\","+
                "\"shipping credits tax\","+
                "\"Regulatory Fee\","+
                "\"Tax On Regulatory Fee\","+
                "\"promotional rebates\","+
                "\"promotional rebates tax\","+
                "\"marketplace withheld tax\","+
                "\"selling fees\","+
                "\"fba fees\","+
                "\"other transaction fees\","+
                "\"other\","+
                "\"total\""+
                "\n";
    }

    private String generarAxCSV(CSVRecord lineaCSV) {
        String[] celdasRow = lineaCSV.values();
        celdasRow[indexByLabelsOrders.sku] = this.ignorarCaracteresSKU(celdasRow[indexByLabelsOrders.sku]);        
        
        // 08/05/2024 Solicitud Tania Aguayo Teams
        //if (!(celdasRow[indexByLabelsOrders.type].equalsIgnoreCase("Order")
        //        || celdasRow[indexByLabelsOrders.type].equalsIgnoreCase("Refund"))) {
        //    celdasRow[indexByLabelsOrders.sku]="";    
        //    celdasRow[indexByLabelsOrders.quantity]="";
        //}

        //celdasRow[indexByLabelsOrders.fbaFees]="0"; // 25/04/2024 Solicitud Contabilidad
        celdasRow[indexByLabelsOrders.productSalesTax]="0"; // 14/03/2024 Solicitud Contabilidad 
        celdasRow[indexByLabelsOrders.marketplaceWithheldTax]="0"; // 14/03/2024 Solicitud Contabilidad 
        celdasRow[indexByLabelsOrders.regulatoryFee]="0"; // 02/04/2024 Andres
        celdasRow[indexByLabelsOrders.taxOnRegulatoryFee]="0"; // 25/04/2024 Heidi Torres Correos        
        celdasRow[indexByLabelsOrders.shippingCredits]="0"; // 25/04/2024 Heidi Torres Correos
        celdasRow[indexByLabelsOrders.shippingCreditsTax]="0"; // 25/04/2024 Heidi Torres Correos
        celdasRow[indexByLabelsOrders.promotionalRebates]="0"; // 25/04/2024 Heidi Torres Correos
        celdasRow[indexByLabelsOrders.promotionalRebatesTax]="0"; // 25/04/2024 Heidi Torres Correos
        
        return  "\""+celdasRow[indexByLabelsOrders.dateTime]+"\""+","+ // #1
                "\""+celdasRow[indexByLabelsOrders.settlementId]+"\""+","+ // #2
                "\""+celdasRow[indexByLabelsOrders.type]+"\""+","+ // #3
                "\""+celdasRow[indexByLabelsOrders.orderId]+"\""+","+ // #4
                "\""+celdasRow[indexByLabelsOrders.sku]+"\""+","+ // #5
                "\""+celdasRow[indexByLabelsOrders.description].replace("\"", "\"\"")+"\""+","+ // #6 
                "\""+celdasRow[indexByLabelsOrders.quantity]+"\""+","+ // #7
                "\""+celdasRow[indexByLabelsOrders.marketplace]+"\""+","+ // #8
                "\""+celdasRow[indexByLabelsOrders.fulfillment]+"\""+","+ // #9
                "\""+celdasRow[indexByLabelsOrders.orderCity]+"\""+","+ // #10
                "\""+celdasRow[indexByLabelsOrders.orderState]+"\""+","+ // #11
                "\""+celdasRow[indexByLabelsOrders.orderPostal]+"\""+","+ // #12
                "\""+celdasRow[indexByLabelsOrders.taxCollectionModel]+"\""+","+ // #13
                "\""+celdasRow[indexByLabelsOrders.productSales]+"\""+","+ // #14
                "\""+celdasRow[indexByLabelsOrders.productSalesTax]+"\""+","+ // #15
                "\""+celdasRow[indexByLabelsOrders.shippingCredits]+"\""+","+ // #16
                "\""+celdasRow[indexByLabelsOrders.shippingCreditsTax]+"\""+","+ // #17
                "\""+celdasRow[indexByLabelsOrders.regulatoryFee]+"\""+","+ // #18
                "\""+celdasRow[indexByLabelsOrders.taxOnRegulatoryFee]+"\""+","+ // #19
                "\""+celdasRow[indexByLabelsOrders.promotionalRebates]+"\""+","+ // #20
                "\""+celdasRow[indexByLabelsOrders.promotionalRebatesTax]+"\""+","+ // #21
                "\""+celdasRow[indexByLabelsOrders.marketplaceWithheldTax]+"\""+","+ // #22
                "\""+celdasRow[indexByLabelsOrders.sellingFees]+"\""+","+ // #23
                "\""+celdasRow[indexByLabelsOrders.fbaFees]+"\""+","+ // #24
                "\""+celdasRow[indexByLabelsOrders.otherTransactionFees]+"\""+","+ // #25
                "\""+celdasRow[indexByLabelsOrders.other]+"\""+","+ // #26
                "\""+celdasRow[indexByLabelsOrders.total]+"\""+ // #27
                "\n";        
    }

    private void getIndexByLabelsOrders(CSVRecord encabezado) {
        List<String> celdas = Arrays.asList(encabezado.values());
        System.out.println(celdas.toString());
        Iterator<String> cellIterator = celdas.listIterator();
        String celda;
        byte contadorCampos=0;
        // index a partir de [0]
        byte indexLabel = -1; 
        while (cellIterator.hasNext()) {
            celda = cellIterator.next();
            indexLabel++;
            switch (celda) {
                case "date/time"://1
                    indexByLabelsOrders.dateTime = indexLabel;
                    contadorCampos++;
                    break;
                case "settlement id"://2
                    indexByLabelsOrders.settlementId = indexLabel;
                    contadorCampos++;
                    break;
                case "type"://3
                    indexByLabelsOrders.type = indexLabel;
                    contadorCampos++;
                    break;                
                case "order id"://4
                    indexByLabelsOrders.orderId = indexLabel;
                    contadorCampos++;
                    break;
                case "sku"://5
                    indexByLabelsOrders.sku = indexLabel;
                    contadorCampos++;
                    break;
                case "description"://6
                    indexByLabelsOrders.description = indexLabel;
                    contadorCampos++;
                    break;
                case "quantity"://7
                    indexByLabelsOrders.quantity = indexLabel;
                    contadorCampos++;
                    break;
                case "marketplace"://8
                    indexByLabelsOrders.marketplace = indexLabel;
                    contadorCampos++;
                    break;
                case "fulfillment"://9
                    indexByLabelsOrders.fulfillment = indexLabel;
                    contadorCampos++;
                    break;                    
                case "order city"://10
                    indexByLabelsOrders.orderCity = indexLabel;
                    contadorCampos++;
                    break;
                case "order state"://11
                    indexByLabelsOrders.orderState = indexLabel;
                    contadorCampos++;
                    break;                    
                case "order postal"://12
                    indexByLabelsOrders.orderPostal = indexLabel;
                    contadorCampos++;
                    break;
                case "tax collection model"://13
                    indexByLabelsOrders.taxCollectionModel = indexLabel;
                    contadorCampos++;
                    break;
                case "product sales"://14
                    indexByLabelsOrders.productSales = indexLabel;
                    contadorCampos++;
                    break;
                case "product sales tax"://15
                    indexByLabelsOrders.productSalesTax = indexLabel;
                    contadorCampos++;
                    break;
                case "shipping credits"://16
                    indexByLabelsOrders.shippingCredits = indexLabel;
                    contadorCampos++;
                    break;
                case "shipping credits tax"://17
                    indexByLabelsOrders.shippingCreditsTax = indexLabel;
                    contadorCampos++;
                    break;
                case "Regulatory Fee"://18
                    indexByLabelsOrders.regulatoryFee = indexLabel;
                    contadorCampos++;
                    break;
                case "Tax On Regulatory Fee"://19
                    indexByLabelsOrders.taxOnRegulatoryFee = indexLabel;
                    contadorCampos++;
                    break;
                case "promotional rebates"://20
                    indexByLabelsOrders.promotionalRebates = indexLabel;
                    contadorCampos++;
                    break;
                case "promotional rebates tax"://21
                    indexByLabelsOrders.promotionalRebatesTax = indexLabel;
                    contadorCampos++;
                    break;
                case "marketplace withheld tax"://22
                    indexByLabelsOrders.marketplaceWithheldTax = indexLabel;
                    contadorCampos++;
                    break;
                case "selling fees"://23
                    indexByLabelsOrders.sellingFees = indexLabel;
                    contadorCampos++;
                    break;
                case "fba fees"://24
                    indexByLabelsOrders.fbaFees = indexLabel;
                    contadorCampos++;
                    break;
                case "other transaction fees"://25
                    indexByLabelsOrders.otherTransactionFees = indexLabel;
                    contadorCampos++;
                    break;
                case "other"://26
                    indexByLabelsOrders.other = indexLabel;
                    contadorCampos++;
                    break;
                case "total"://27
                    indexByLabelsOrders.total = indexLabel;
                    contadorCampos++;
                    break;                    
            }
        }
        areaTexto.append(this.indexByLabelsOrders.toString()+"\n\n");
        // Columnas = 27
        if (contadorCampos<27){
            JOptionPane.showMessageDialog(null, "The interface Amazon FBA does not correspond to the work template|"+
                    contadorCampos);
            System.exit(0);
        }
    }
}
