/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.templateminmax;

import Model.IndexByLabelsExcell;
import Model.ItemDatosTemplate;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author AndresTriana
 */
public class TemplateMinMax extends javax.swing.JFrame {

    private final JFileChooser seleccion;

    File archivo;
    FileWriter fileTemplate = null;
    BufferedWriter bufferGrabarCSV = null;

    XSSFWorkbook workbookUploaded;
    CreationHelper createHelper;
    XSSFSheet sheetUploaded;
    CellStyle cellStyle;
    Row rowUpload;
    
    ArrayList<ItemDatosTemplate> listaItemDatos = null;
    IndexByLabelsExcell indexByLabels = new IndexByLabelsExcell();
    
    String [] celdasRow;
    String nombreArchivo=" ";
    String pathFileAX=" ";
    String salida=" ";
    String lineaCSV = " ";  
  
    int contadorFilas = 0;
    int contadorFilasExcel = 0;
    int contadorCeldas = 0;
    
    public TemplateMinMax() {
        initComponents();        
        seleccion = new JFileChooser();
        //listaBodegasEstados = dataBase.consultarWarehouseStates();
        listaItemDatos = new <ItemDatosTemplate>ArrayList();
        crearWorkBookExcell();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generador Template Minimos - Maximos para AX");
        setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        boton.setText("Seleccionar Replenishment Rpt Liquor");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        areaTexto.setEditable(false);
        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        jScrollPane1.setViewportView(areaTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(boton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(380, 380, 380))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
        
        int result = seleccion.showOpenDialog(null);
        archivo = seleccion.getSelectedFile();
        // validar archivo.exists() archivo.isFile()
        if (result == JFileChooser.APPROVE_OPTION) {
            salida = archivo.getPath() + " | " + archivo.getName();
            System.out.println("Salida = " + salida);
            nombreArchivo = archivo.getName();
            if (!(nombreArchivo.contains(".csv"))) {
                salida += " | La interface no es un Archivo de Valores separados por comas\n\n";
                areaTexto.append(salida);
            } else {
                salida += "\n\n";
                areaTexto.append(salida);
                procesarReplenishment(archivo.getPath(), archivo.getName());
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            areaTexto.append("Cancelar Seleccion\n\n");
        }     
    }//GEN-LAST:event_botonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TemplateMinMax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TemplateMinMax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TemplateMinMax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TemplateMinMax.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TemplateMinMax().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton boton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void procesarReplenishment(String pathFile, String nameFile) {
        areaTexto.append("Procesando Replenishment Rpt..." + "\n");
        areaTexto.append("\n");
        
        try {
            FileOutputStream archivoCSV;
            DataOutputStream grabarCSV;

            LocalDateTime objFechaHora = LocalDateTime.now();
            String fechaHora = objFechaHora.toString();
            fechaHora = fechaHora.replace(':','.');
            
            archivoCSV = new FileOutputStream(pathFile.replace(nameFile, 
                    "TempleteWork"+fechaHora+".csv"));
            grabarCSV = new DataOutputStream(archivoCSV);
            //
            areaTexto.append("\n********** generarTemplateDeTrabajo **********\n");            
            // Encabezados Templete
            lineaCSV = crearEtiquetasCSV();
            grabarCSV.writeBytes(lineaCSV);
            areaTexto.append(lineaCSV+"\n");
            // Creamos el objeto iterator = recorrer filas            
            try ( BufferedReader archivoXLS = new BufferedReader(new FileReader(pathFile))){
                CSVRecord recordsCSV = null;
                Iterator<CSVRecord> rowIterator = CSVFormat.EXCEL.parse(archivoXLS).iterator();
                // Ignorar Fila=1 Date Report
                if (rowIterator.hasNext()){                    
                    rowIterator.next();
                }
                // Ignorar Encabezados - Determinar index Labels Bodegas Fila=2
                if (rowIterator.hasNext()){ 
                    recordsCSV = rowIterator.next();
                    getIndexByLabelsBodegas(recordsCSV);
                }                
                // Ignorar Encabezados - Determinar index Labels Detalle Fila=3
                if (rowIterator.hasNext()){
                    recordsCSV = rowIterator.next();                    
                    getIndexByLabels(recordsCSV);
                } else {
                    JOptionPane.showMessageDialog(null, "The interface Replenishment has no headers/records");
                    System.exit(0);
                }   
                // Recorremos todas las filas
                while (rowIterator.hasNext()) {
                    recordsCSV = rowIterator.next();
                    salida = Arrays.toString(recordsCSV.values());
                    celdasRow = recordsCSV.values(); 
                    ++contadorFilas;
                    areaTexto.append("Fila #"+(contadorFilas)+":"+salida+"\n");
                    System.out.println("Fila #"+(contadorFilas)+":"+salida);
                    /*
                    int i=0;
                    for (String celdaStr : celdasRow) {
                        System.out.println(i+":"+celdaStr);
                        i++;
                    }
                    */
                    if (!celdasRow[2].contains("#N/D")){
                        celdasRow[1] = celdasRow[1].replace("\r\n", "");
                        celdasRow[1] = celdasRow[1].replace("\n", "");
                        ItemDatosTemplate itemDatosTemlate;
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "005", 
                                celdasRow[indexByLabels.min005], 
                                celdasRow[indexByLabels.max005]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");   
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);
                        //
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "011",
                                celdasRow[indexByLabels.min011], 
                                celdasRow[indexByLabels.max011]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");                    
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);                   
                        //
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "012",
                                celdasRow[indexByLabels.min012], 
                                celdasRow[indexByLabels.max012]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");                    
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);
                        //
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "018",
                                celdasRow[indexByLabels.min018], 
                                celdasRow[indexByLabels.max018]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");                    
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);
                        //
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "019",
                                celdasRow[indexByLabels.min019], 
                                celdasRow[indexByLabels.max019]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");                    
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);
                        //
                        itemDatosTemlate = new ItemDatosTemplate(celdasRow[indexByLabels.itemNumber], 
                                celdasRow[indexByLabels.productName],
                                "023",
                                celdasRow[indexByLabels.min023], 
                                celdasRow[indexByLabels.max023]);
                        listaItemDatos.add(itemDatosTemlate);
                        areaTexto.append(itemDatosTemlate.toString()+"\n");                    
                        lineaCSV = generarCSV(itemDatosTemlate);
                        grabarCSV.writeBytes(lineaCSV);
                        //
                    }
                }
                // cerramos el libro excel
                archivoCSV.close();
                //
                generarTemplate();
                //
            } catch (IOException ex) {
		JOptionPane.showMessageDialog( null, ex.getMessage() );
            }
        } catch (FileNotFoundException ex ) {
        	JOptionPane.showMessageDialog( null, ex.getMessage() );
        } catch (IOException ex) {
		JOptionPane.showMessageDialog( null, ex.getMessage() );
        }
    }

    private String generarCSV(ItemDatosTemplate itemDatosTemplate) {
        return  itemDatosTemplate.getItem()+";"+ // #1
                itemDatosTemplate.getProductName()+";"+ // #2
                itemDatosTemplate.getWareHouse()+";"+ // #3
                itemDatosTemplate.getMinimos()+";"+ // #4
                itemDatosTemplate.getMaximos()+";"+ // #5
                "\r\n";
    }

    private String crearEtiquetasCSV() {
        return  "Item;"+"Product Name;"+"WareHouse;"+"Min;"+"Max;"+
                "\r\n";
    }

    private void generarTemplate() {
        areaTexto.append("\n********** generarTemplate **********\n");
        DecimalFormat df = new DecimalFormat("#");
        float number = 0;
        for (ItemDatosTemplate itemDatos : this.listaItemDatos) {
            contadorFilasExcel++;
            rowUpload = sheetUploaded.createRow(contadorFilasExcel);
            rowUpload.createCell(0).setCellValue(Integer.parseInt(itemDatos.getItem()));
            rowUpload.createCell(1).setCellValue(
                    createHelper.createRichTextString(itemDatos.getProductName()));
            rowUpload.createCell(2).setCellValue(
                    createHelper.createRichTextString(itemDatos.getWareHouse()));
            number = Float.valueOf(df.format(Float.parseFloat(itemDatos.getMinimos())));
            rowUpload.createCell(3).setCellValue(number);
            number = Float.valueOf(df.format(Float.parseFloat(itemDatos.getMaximos())));
            rowUpload.createCell(4).setCellValue(number);            
        } 
        writeWorkBookExcell();
        areaTexto.append("\n\nFin Proceso");
    }

    private void getIndexByLabelsBodegas(CSVRecord encabezado){
        List<String> celdas = Arrays.asList(encabezado.values());
        Iterator<String> cellIterator = celdas.listIterator();
        String celda;
        int contadorCampos=0;
        // index a partir de [0]
        int indexLabel = -1; 
        while (cellIterator.hasNext()) {
            celda = cellIterator.next();
            indexLabel++;
            System.out.println(indexLabel+":"+celda);
            switch (celda) {
                case "Hidalgo":
                    indexByLabels.hidalgo005 = indexLabel;
                    contadorCampos++;
                    break;
                case "Laredo3":
                    indexByLabels.laredo011 = indexLabel;
                    contadorCampos++;
                    break;
                case "El Paso":
                    indexByLabels.elpaso012 = indexLabel;
                    contadorCampos++;
                    break;
                case "Otay":
                    indexByLabels.otay018 = indexLabel;
                    contadorCampos++;
                    break;
                case "San Ysidro":
                    indexByLabels.sanysidro019 = indexLabel;
                    contadorCampos++;
                    break;
                case "Iturbide":
                    indexByLabels.iturbide023 = indexLabel;
                    contadorCampos++;
                    break;                    
            }
        }
        areaTexto.append(this.indexByLabels.toString()+"\n\n");        
        System.out.println(this.indexByLabels.toString());
        if (contadorCampos<6){
            JOptionPane.showMessageDialog(null, "The file does not correspond to Replenishment Rpt.xlsx");
            System.exit(0);
        } 
    }
    
    private void getIndexByLabels(CSVRecord encabezado) {
        List<String> celdas = Arrays.asList(encabezado.values());
        System.out.println(celdas.toString());
        Iterator<String> cellIterator = celdas.listIterator();
        String celda;
        int contadorCampos=0;
        // index a partir de [0]
        int indexLabel = -1; 
        while (cellIterator.hasNext()) {
            celda = cellIterator.next();
            indexLabel++;
            System.out.println(indexLabel+":"+celda);
            switch (celda) {
                case "Item Nbr.":
                    indexByLabels.itemNumber = indexLabel;
                    contadorCampos++;
                    break;
                case "Product name":
                    indexByLabels.productName = indexLabel;
                    contadorCampos++;
                    break;
                case "MIN":
                    if (indexLabel==indexByLabels.hidalgo005){
                        indexByLabels.min005 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel==indexByLabels.laredo011){
                        indexByLabels.min011 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel==indexByLabels.elpaso012){
                        indexByLabels.min012 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel==indexByLabels.otay018){
                        indexByLabels.min018 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel==indexByLabels.sanysidro019){
                        indexByLabels.min019 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel==indexByLabels.iturbide023){
                        indexByLabels.min023 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    break;
                case "MAX":
                    if (indexLabel<indexByLabels.laredo011){
                        indexByLabels.max005 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel<indexByLabels.elpaso012){
                        indexByLabels.max011 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel<indexByLabels.otay018){
                        indexByLabels.max012 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel<indexByLabels.sanysidro019){
                        indexByLabels.max018 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    if (indexLabel<indexByLabels.iturbide023){
                        indexByLabels.max019 = indexLabel;
                        contadorCampos++;
                        break;
                    }
                    // Max Iturbide. Test si aparece otra columna Max
                    if (indexByLabels.max023==0){
                        indexByLabels.max023 = indexLabel;
                        contadorCampos++;
                        break;                        
                    }
            }
        }
        areaTexto.append(this.indexByLabels.toString()+"\n\n");        
        System.out.println(this.indexByLabels.toString());
        if (contadorCampos<14){
            JOptionPane.showMessageDialog(null, "The file does not correspond to Replenishment Rpt.xlsx");
            System.exit(0);
        }    
    }

    private void crearWorkBookExcell() {
        // Crear el objeto que tendrá el libro de Excel
        workbookUploaded = new XSSFWorkbook(); 
        // Crear la primera hoja del workbook
        createHelper = workbookUploaded.getCreationHelper();
        sheetUploaded = workbookUploaded.createSheet("TemplateMinMax");
        // Crear style
        cellStyle = workbookUploaded.createCellStyle();
        // Create row = Header
        rowUpload = sheetUploaded.createRow(0);
        // Create a cell = labels Header
        rowUpload.createCell(0).setCellValue(
             createHelper.createRichTextString("Item"));
        rowUpload.createCell(1).setCellValue(
             createHelper.createRichTextString("Product Name"));
        rowUpload.createCell(2).setCellValue(
             createHelper.createRichTextString("WareHouse"));
        rowUpload.createCell(3).setCellValue(
             createHelper.createRichTextString("Min"));
        rowUpload.createCell(4).setCellValue(
             createHelper.createRichTextString("Max"));        
        // Iniciamos el contador de filas en 1
        contadorFilasExcel = 0;
    }
    
    private void writeWorkBookExcell() {
        try {
            OutputStream fileOut = new FileOutputStream(new File("TemplateMinMax"+capturarFechaHora()+".xlsx"));
            workbookUploaded.write(fileOut);
        }catch(IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    } 
    
    private String capturarFechaHora() {
        LocalDateTime objFechaHora = LocalDateTime.now();
        return objFechaHora.toString().replace(':', '.');       
    }    
}