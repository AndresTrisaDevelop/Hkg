/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.shopifyax;

import Model.BodegasEstados;
import Model.DataBase;
import Model.IndexByLabelsExcell;
import Model.ItemDatosOrden;
import Model.ProductoStock;
import Model.SalidaCSV;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

/**
 *
 * @author AndresTriana
 */
public class ShopifyAX extends javax.swing.JFrame {

    private DataBase dataBase = null;
    private final JFileChooser seleccion;

    File archivo;
    FileWriter fileShopify = null;
    BufferedWriter bufferGrabarCSV = null;

    ArrayList<SalidaCSV> listaSalidaCSV = null;
    ArrayList<ProductoStock> listaProductoStock = null;
    ArrayList<BodegasEstados> listaBodegasEstados = null;
    IndexByLabelsExcell indexByLabels = new IndexByLabelsExcell();
    
    String [] celdasRow;
    String nombreArchivo=" ";
    String pathFileAX=" ";
    String salida=" ";
    String lineaCSV = " ";  

    boolean bodega002 = false;
    boolean bodega008 = false;
    boolean bodega600 = false;    
    boolean bodega999 = false;
    
    int contadorFilas = 0;
    int contadorCeldas = 0;
    
    public ShopifyAX() {
        initComponents();        
        seleccion = new JFileChooser();
        dataBase = new DataBase();
        //listaBodegasEstados = dataBase.consultarWarehouseStates();
        listaBodegasEstados = dataBase.asignarWarehouseStates();
        listaProductoStock = new <ProductoStock>ArrayList();
        listaSalidaCSV = new <SalidaCSV>ArrayList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Convertidor Interface NewEgg a Interface AX");
        setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        boton.setText("Seleccionar Interface Shopify");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        areaTexto.setEditable(false);
        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        jScrollPane1.setViewportView(areaTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(boton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(380, 380, 380))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
        int result = seleccion.showOpenDialog(null);
        archivo = seleccion.getSelectedFile();
        // validar archivo.exists() archivo.isFile()
        if (result == JFileChooser.APPROVE_OPTION) {
            salida = archivo.getPath() + " | " + archivo.getName();
            System.out.println("Salida = " + salida);
            nombreArchivo = archivo.getName();
            if (!(nombreArchivo.contains(".csv"))) {
                salida += " | La interface no es un Archivo de Valores separados por comas\n\n";
                areaTexto.append(salida);
            } else {
                salida += "\n\n";
                areaTexto.append(salida);
                convertirTOCSV(archivo.getPath(), archivo.getName());
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            areaTexto.append("Cancelar Seleccion\n\n");
        }     
    }//GEN-LAST:event_botonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopifyAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopifyAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopifyAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopifyAX.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ShopifyAX().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton boton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void convertirTOCSV(String pathFile, String nameFile) {
        listaBodegasEstados.forEach((bodegaEstado) -> areaTexto.append(bodegaEstado.toString() + "\n"));
        areaTexto.append("\n");
        
        try {
            FileOutputStream archivoAxCSV;
            DataOutputStream grabarAxCSV;

            LocalDateTime objFechaHora = LocalDateTime.now();
            String fechaHora = objFechaHora.toString();
            fechaHora = fechaHora.replace(':','.');
            
            archivoAxCSV = new FileOutputStream(pathFile.replace(nameFile, 
                    "AXWork"+fechaHora+".txt"));
            grabarAxCSV = new DataOutputStream(archivoAxCSV);
            //
            areaTexto.append("\n********** generarInterfaceDeTrabajo **********\n");            
            // Encabezados AX
            salida = "AssignedWharehouse" + "\t"
                    + "Wharehouse" + "\t";
            lineaCSV = crearEtiquetasAxCSV();
            grabarAxCSV.writeBytes(salida+lineaCSV);
            areaTexto.append(salida+lineaCSV);            
            //
            try ( BufferedReader fileEntrada = new BufferedReader(new FileReader(pathFile))){
                CSVRecord recordsCSV = null;
                Iterator<CSVRecord> recordsIteratorCSV = CSVFormat.EXCEL.parse(fileEntrada).iterator();
                // Ignorar Encabezados - Determinar index Labels
                if (recordsIteratorCSV.hasNext()){
                    recordsCSV = recordsIteratorCSV.next();
                    getIndexByLabels(recordsCSV);
                } else {
                    JOptionPane.showMessageDialog(null, "The interface Shopify has no headers/records");
                    System.exit(0);
                }   
                // Recorremos todas las filas
                while (recordsIteratorCSV.hasNext()) {
                    recordsCSV = recordsIteratorCSV.next();
                    salida = Arrays.toString(recordsCSV.values());
                    celdasRow = recordsCSV.values();                                
                    areaTexto.append(salida+"\n");
                    /*
                    int i=0;
                    for (String celdaStr : celdasRow) {
                        System.out.println(i+":"+celdaStr);
                        i++;
                    }
                    */
                    ItemDatosOrden itemDatosOrden;
                    itemDatosOrden = new ItemDatosOrden(celdasRow[indexByLabels.itemSellerPart], 
                            celdasRow[indexByLabels.itemUnitPrice],
                            celdasRow[indexByLabels.itemQuantityOrdered], " ");
                    areaTexto.append(itemDatosOrden.toString()+"\n");
                    //
                    BodegasEstados bodegaEstado;
                    if (celdasRow[indexByLabels.shipToState].length() > 2) {
                        bodegaEstado = buscarBodegaEstadoNombre(celdasRow[indexByLabels.shipToState]);
                    } else {
                        bodegaEstado = buscarBodegaEstado(celdasRow[indexByLabels.shipToState]);
                    }                  
                    //
                    ProductoStock productoStock = asignarBodegaDisponibilidad(
                            bodegaEstado, itemDatosOrden);

                    salida = productoStock.getBodegaAsignada() + "\t"
                            + bodegaEstado.getBodegaID() + "\t";
                    
                    lineaCSV = generarAxCSV();
                    //
                    grabarAxCSV.writeBytes(salida+lineaCSV);
                    areaTexto.append(salida+lineaCSV);
                    
                    SalidaCSV salidaCSV = new SalidaCSV(productoStock.getBodegaAsignada(),
                            lineaCSV);
                    listaSalidaCSV.add(salidaCSV);                  
                }
                // cerramos el libro excel
                archivoAxCSV.close();
                dataBase.getConnection().close();                
                //
                generarInterfaceAX();
                //
            } catch (IOException ex) {
		JOptionPane.showMessageDialog( null, ex.getMessage() );
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog( null, "dataBase.getConnection."+ex.getMessage());
            }
        } catch (FileNotFoundException ex ) {
        	JOptionPane.showMessageDialog( null, ex.getMessage() );
        } catch (IOException ex) {
		JOptionPane.showMessageDialog( null, ex.getMessage() );
        }
    }

    private String generarAxCSV() {
        int cantidad = Integer.parseInt(celdasRow[indexByLabels.itemQuantityOrdered]);        
        if (cantidad > 1){
            float precio = Float.parseFloat(celdasRow[indexByLabels.itemUnitPrice]) * cantidad;
            celdasRow[indexByLabels.itemUnitPrice] = String.valueOf(precio);
        }
        //
        if (celdasRow[indexByLabels.orderNumber].charAt(0)=='#'){
            celdasRow[indexByLabels.orderNumber] = celdasRow[indexByLabels.orderNumber].substring(1);
        }
        //
        String[] tmpfecha = celdasRow[indexByLabels.orderDateTime].split(" ");
        celdasRow[indexByLabels.orderDateTime] = tmpfecha[0]+"T"+tmpfecha[1]+"+00:00";
        //
        if (celdasRow[indexByLabels.shipToZipcode].contains("\'")){
            celdasRow[indexByLabels.shipToZipcode]=celdasRow[indexByLabels.shipToZipcode].substring(1);
        }
        if (celdasRow[indexByLabels.shipToPhoneNumber].contains("\'")){
            celdasRow[indexByLabels.shipToPhoneNumber]=celdasRow[indexByLabels.shipToPhoneNumber].substring(1);
        }
        //
        return  celdasRow[indexByLabels.orderNumber]+"\t"+ // #1
                celdasRow[indexByLabels.orderNumber]+"\t"+ // #2
                celdasRow[indexByLabels.orderDateTime]+"\t"+ // #3
                celdasRow[indexByLabels.orderDateTime]+"\t"+ // #4
                celdasRow[indexByLabels.orderCustomerEmail]+"\t"+ // #5
                celdasRow[indexByLabels.shipToName]+"\t"+ // #6 
                celdasRow[indexByLabels.shipToPhoneNumber]+"\t"+ // #7
                celdasRow[indexByLabels.itemSellerPart]+"\t"+ // #8
                celdasRow[indexByLabels.itemSellerName]+"\t"+ // #9
                celdasRow[indexByLabels.itemQuantityOrdered]+"\t"+ // #10
                celdasRow[indexByLabels.currencyCode]+"\t"+ // #11
                celdasRow[indexByLabels.itemUnitPrice]+"\t"+ // #12
                "\t"+"\t"+"\t"+"\t"+"\t"+ // #13-14-15-16-17
                "Standard"+"\t"+ // #18
                celdasRow[indexByLabels.shipToName]+"\t"+ // #19
                celdasRow[indexByLabels.shipToAddress1]+"\t"+ // #20
                celdasRow[indexByLabels.shipToAddress2]+"\t"+ // #21
                "\t"+ // #22
                celdasRow[indexByLabels.shipToCity]+"\t"+ // #23
                celdasRow[indexByLabels.shipToState]+"\t"+ // #24
                celdasRow[indexByLabels.shipToZipcode]+"\t"+ // #25
                "US"+"\t"+ // #26
                celdasRow[indexByLabels.shipToPhoneNumber]+"\t"+ // #27
                "\t"+"\t"+"\t"+ // #28-29-30
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #31-al-40
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #41-al-50
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #51-al-60
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #61-al-70
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #71-al-80
                "\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+ // #81-al-89
                "\r\n";
    }

    private String crearEtiquetasAxCSV() {
        return  "order-id\t"+"order-item-id\t"+"purchase-date\t"+"payments-date\t"+"buyer-email\t"+
                "buyer-name\t"+"buyer-phone-number\t"+"sku\t"+"product-name\t"+"quantity-purchased\t"+
                "currency\t"+"item-price\t"+"item-tax\t"+"shipping-price\t"+"shipping-tax\t"+
                "gift-wrap-price\t"+"gift-wrap-tax\t"+"ship-service-level\t"+"recipient-name\t"+
                "ship-address-1\t"+"ship-address-2\t"+"ship-address-3\t"+"ship-city\t"+"ship-state\t"+
                "ship-postal-code\t"+"ship-country\t"+"ship-phone-number\t"+"tax-location-code\t"+
                "tax-location-city\t"+"tax-location-county\t"+"tax-location-state\t"+
                "per-unit-item-taxable-district\t"+"per-unit-item-taxable-city\t"+
                "per-unit-item-taxable-county\t"+"per-unit-item-taxable-state\t"+
                "per-unit-item-non-taxable-district\t"+"per-unit-item-non-taxable-city\t"+
                "per-unit-item-non-taxable-county\t"+"per-unit-item-non-taxable-state\t"+
                "per-unit-item-zero-rated-district\t"+"per-unit-item-zero-rated-city\t"+
                "per-unit-item-zero-rated-county\t"+"per-unit-item-zero-rated-state\t"+
                "per-unit-item-tax-collected-district\t"+"per-unit-item-tax-collected-city\t"+
                "per-unit-item-tax-collected-county\t"+"per-unit-item-tax-collected-state\t"+
                "per-unit-shipping-taxable-district\t"+"per-unit-shipping-taxable-city\t"+
                "per-unit-shipping-taxable-county\t"+"per-unit-shipping-taxable-state\t"+
                "per-unit-shipping-non-taxable-district\t"+"per-unit-shipping-non-taxable-city\t"+
                "per-unit-shipping-non-taxable-county\t"+"per-unit-shipping-non-taxable-state\t"+
                "per-unit-shipping-zero-rated-district\t"+"per-unit-shipping-zero-rated-city\t"+
                "per-unit-shipping-zero-rated-county\t"+"per-unit-shipping-zero-rated-state\t"+
                "per-unit-shipping-tax-collected-district\t"+" per-unit-shipping-tax-collected-city\t"+
                "per-unit-shipping-tax-collected-county\t"+"per-unit-shipping-tax-collected-state\t"+
                "per-unit-giftwrap-taxable-district\t"+"per-unit-giftwrap-taxable-city\t"+   
                "per-unit-giftwrap-taxable-county\t"+"per-unit-giftwrap-taxable-state\t"+
                "per-unit-giftwrap-non-taxable-district\t"+"per-unit-giftwrap-non-taxable-city\t"+
                "per-unit-giftwrap-non-taxable-county\t"+"per-unit-giftwrap-non-taxable-state\t"+
                "per-unit-giftwrap-zero-rated-district\t"+"per-unit-giftwrap-zero-rated-city\t"+
                "per-unit-giftwrap-zero-rated-county\t"+"per-unit-giftwrap-zero-rated-state\t"+
                "per-unit-giftwrap-tax-collected-district\t"+" per-unit-giftwrap-tax-collected-city\t"+
                "per-unit-giftwrap-tax-collected-county\t"+"per-unit-giftwrap-tax-collected-state\t"+
                "gift-wrap-type\t"+"gift-message-text\t"+"delivery-start-date\t"+"delivery-end-date\t"+
                "delivery-time-zone\t"+"delivery-Instructions\t"+"sales-channel\t"+"order-channel\t"+
                "order-channel-instance\t"+"external-order-id"+
                "\r\n";
    }

    private void generarInterfaceAX() {
        areaTexto.append("\n********** generarInterfaceAX **********\n");
        if (bodega002){
            generarInterfaceBodegaAX("002","Miami");
        }
        if (bodega008){
            generarInterfaceBodegaAX("008", "Laredo");
        }  
        if (bodega600){
            generarInterfaceBodegaAX("600", "WFSFulfilled");
        }          
        if (bodega999){
            generarInterfaceBodegaAX("999", "NoAsignado");
        }
        areaTexto.append("\n\nFin Proceso");
    }

    private void generarInterfaceBodegaAX(String bodega, String nombreBodega) {
        
        areaTexto.append("\n********** generarInterfaceAX - Bodega "+bodega+nombreBodega+" **********\n");
        
        LocalDateTime objFechaHora = LocalDateTime.now();
        String fechaHora = objFechaHora.toString();
        fechaHora = fechaHora.replace(':', '.');

        try {
            fileShopify  = new FileWriter(archivo.getPath().replace(archivo.getName(),
                    "AX"+nombreBodega + fechaHora + ".txt"));
            bufferGrabarCSV = new BufferedWriter(fileShopify);

            // Encabezados AX
            salida = crearEtiquetasAxCSV();
            bufferGrabarCSV.write(salida);
            areaTexto.append(salida);
            //
            for (SalidaCSV salidaCSV : listaSalidaCSV) {
                if (bodega.equals(salidaCSV.getBodegaAsignada())) {
                    salida = salidaCSV.getLineaCSV();
                    bufferGrabarCSV.write(salida);
                    areaTexto.append(salida);
                }
            } 
            bufferGrabarCSV.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "generarInterfaceBodegaAX().fileAmaxonAX." + ex.getMessage());
        }
    }

    private BodegasEstados buscarBodegaEstado(String celda) {
        BodegasEstados bodegaBusqueda = new BodegasEstados("99", "Error", "999");
        for (BodegasEstados bodega : listaBodegasEstados) {
            if (celda.toUpperCase().equals(bodega.getEstadoID())) {
                bodegaBusqueda = bodega;
                break;
            }
        }
        areaTexto.append(bodegaBusqueda.toString()+"\n");
        return bodegaBusqueda;
    }

    private BodegasEstados buscarBodegaEstadoNombre(String celda) {
        BodegasEstados bodegaBusqueda = new BodegasEstados("99", "Error", "999");
        for (BodegasEstados bodega : listaBodegasEstados) {
            if (bodega.getNombreEstado().contains(celda.toUpperCase())) {
                bodegaBusqueda = bodega;
                break;
            }
        }
        areaTexto.append(bodegaBusqueda.toString()+"\n");
        return bodegaBusqueda;
    }
    
    private ProductoStock asignarBodegaDisponibilidad(BodegasEstados bodegaEstado, ItemDatosOrden itemDatos) {
        ProductoStock productoBusqueda = buscarProductoStock(itemDatos.getSKU());
        // Asignar Bodega x Disponibilidad
        int cantidad = Integer.parseInt(itemDatos.getCantidad());

        switch (bodegaEstado.getBodegaID()) {
            case "002":
                if (productoBusqueda.getStock002() >= cantidad) {
                    productoBusqueda.setBodegaAsignada(bodegaEstado.getBodegaID());
                    productoBusqueda.setRestaStock002(cantidad);
                    bodega002 = true;
                } else if (productoBusqueda.getStock008() >= cantidad) {
                    productoBusqueda.setBodegaAsignada("008");
                    productoBusqueda.setRestaStock008(cantidad);
                    bodega008 = true;
                } else {
                    productoBusqueda.setBodegaAsignada("999");
                    bodega999 = true;
                }
                break;
            case "008":
                if (productoBusqueda.getStock008() >= cantidad) {
                    productoBusqueda.setBodegaAsignada(bodegaEstado.getBodegaID());
                    productoBusqueda.setRestaStock008(cantidad);
                    bodega008 = true;
                } else if (productoBusqueda.getStock002() >= cantidad) {
                    productoBusqueda.setBodegaAsignada("002");
                    productoBusqueda.setRestaStock002(cantidad);
                    bodega002 = true;
                } else {
                    productoBusqueda.setBodegaAsignada("999");
                    bodega999 = true;
                }
        }
        // Update Objeto
        listaProductoStock.set(productoBusqueda.getIndexLista(), productoBusqueda);
        //
        areaTexto.append(productoBusqueda.toString() + "\n");
        return productoBusqueda;
    }

    private ProductoStock buscarProductoStock(String sku) {
        ProductoStock productoBusqueda = new ProductoStock(sku);        
        boolean existeProducto = false;
        int indexLista = 0;
        
        if (!listaProductoStock.isEmpty()){
            for (ProductoStock producto : listaProductoStock) {
                if (sku.equals(producto.getSKU())) {
                    productoBusqueda = producto;
                    productoBusqueda.setIndexLista(indexLista);
                    existeProducto = true;
                    break;
                }
                indexLista++;
            }
        }
        
        if (!existeProducto){
            productoBusqueda = dataBase.consultarInventOnHand(sku);
            indexLista = listaProductoStock.size();
            productoBusqueda.setIndexLista(indexLista);
            listaProductoStock.add(productoBusqueda);  
            //indexLista = listaProductoStock.indexOf(productoBusqueda);
        }
        
        return productoBusqueda;
    }

    private void getIndexByLabels(CSVRecord encabezado) {
        List<String> celdas = Arrays.asList(encabezado.values());
        System.out.println(celdas.toString());
        Iterator<String> cellIterator = celdas.listIterator();
        String celda;
        byte contadorCampos=0;
        // index a partir de [0]
        byte indexLabel = -1; 
        while (cellIterator.hasNext()) {
            celda = cellIterator.next();
            indexLabel++;
            switch (celda) {
                case "Name":
                    indexByLabels.orderNumber = indexLabel;
                    contadorCampos++;
                    break;
                case "Created at":
                    indexByLabels.orderDateTime = indexLabel;
                    contadorCampos++;
                    break;
                case "Currency":
                    indexByLabels.currencyCode = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Address1":
                    indexByLabels.shipToAddress1 = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Address2":
                    indexByLabels.shipToAddress2 = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping City":
                    indexByLabels.shipToCity = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Province":
                    indexByLabels.shipToState = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Zip":
                    indexByLabels.shipToZipcode = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Name":
                    indexByLabels.shipToName = indexLabel;
                    contadorCampos++;
                    break;
                case "Shipping Phone":
                    indexByLabels.shipToPhoneNumber = indexLabel;
                    contadorCampos++;
                    break;
                case "Email":
                    indexByLabels.orderCustomerEmail = indexLabel;
                    contadorCampos++;
                    break;
                case "Requested Delivery Date":
                    indexByLabels.requestedDeliveryDate = indexLabel;
                    contadorCampos++;
                    break;
                case "Lineitem sku":
                    indexByLabels.itemSellerPart =  indexLabel;;
                    contadorCampos++;
                    break;
                case "Lineitem price":
                    indexByLabels.itemUnitPrice =  indexLabel;
                    contadorCampos++;
                    break;
                case "Lineitem quantity":
                    indexByLabels.itemQuantityOrdered =  indexLabel;
                    contadorCampos++;
                    break;
                case "Lineitem name":
                    indexByLabels.itemSellerName =  indexLabel;
                    contadorCampos++;
                    break;
            }
        }
        areaTexto.append(this.indexByLabels.toString()+"\n\n");        
        if (contadorCampos<15){
            JOptionPane.showMessageDialog(null, "The interface does not correspond to the work template");
            System.exit(0);
        }        
    }
}
